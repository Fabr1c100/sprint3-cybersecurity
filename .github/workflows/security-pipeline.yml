# Nome do nosso workflow
name: Pipeline de Segurança DevSecOps

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build-and-static-analysis:
    name: Build, SCA e SAST
    runs-on: ubuntu-latest

    permissions:
      security-events: write
      actions: read
      contents: read

    steps:
      - name: Checkout do código
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Instalar dependências
        run: npm install

      - name: Executar Scan de Dependências (SCA) com Snyk
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: test
          args: --severity-threshold=critical --all-projects

      # --- SAST COM SEMGREP (MÉTODO DIRETO E ROBUSTO) ---
      - name: Executar Análise Estática (SAST) com Semgrep
        run: |
          docker run --rm -v "${{ github.workspace }}:/src" returntocorp/semgrep semgrep ci --sarif -o semgrep.sarif || true
          
      - name: Verificar se o relatório SAST foi criado
        run: ls -la

      - name: Upload Semgrep SARIF to GitHub
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep.sarif
        if: always()

  dynamic-analysis:
    name: Análise Dinâmica (DAST)
    runs-on: ubuntu-latest
    needs: build-and-static-analysis

    steps:
      - name: Checkout do código
        uses: actions/checkout@v3

      - name: Construir imagem Docker
        run: docker build -t app-vulneravel:latest .

      - name: Iniciar container da aplicação
        run: docker run -d --name meu-app -p 3000:3000 app-vulneravel:latest

      - name: Executar Análise Dinâmica (DAST) com OWASP ZAP
        uses: zaproxy/action-baseline@v0.10.0
        with:
          target: 'http://127.0.0.1:3000/'
          cmd_options: '-a'
          fail_on_risk: 'warn'

